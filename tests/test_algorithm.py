import os
import tempfile
import copy
import json
import utils

def count_events(results, event_type, valid_event_names):
    print("Counting events of type {} with a name in {}".format(event_type, valid_event_names))
    num_events = 0
    total_zone_count = 0
    with open(results, "r") as file_:
        for line in file_:
            if line and line != '':
                result = json.loads(line)
                if result.get('inferences'):
                    for inference in result['inferences']:
                        if inference['type'] == 'EVENT' and inference['subtype'] == event_type:
                            if inference['event']['name'] in valid_event_names:
                                num_events+=1
                                if event_type == "object-zone-count":
                                    key = "zone-count"
                                    total_zone_count += int(inference['event']['properties'][key])
                                print(inference)
    return num_events, total_zone_count

def get_event_names(client_params):
    event_names = []
    event_parameter_key = client_params["event_parameter"]
    if not event_parameter_key in client_params["pipeline"]["parameters"]:
        return event_names
    pipeline_parameter = client_params["pipeline"]["parameters"][event_parameter_key]
    key = event_parameter_key.split('-')
    event_parameter_child = key[1] + 's'
    event_parameters = pipeline_parameter.get(event_parameter_child, [])
    for parameter in event_parameters:
        event_names.append(parameter["name"])
    return event_names

def test_algorithm(helpers, test_case, test_filename, generate):
    #Create copy of test case to create the generated file
    _test_case = copy.deepcopy(test_case)
    helpers.run_server(test_case["server_params"])

    output_file = None
    client_params = test_case["client"]["params"]
    output_file = client_params["output_location"]
    numerical_tolerance = _test_case.get("numerical_tolerance", 0)

    if not output_file:
        workdir_path = tempfile.TemporaryDirectory()
        output_file = os.path.join(workdir_path.name, "algo.jsonl")
        client_params["output_location"] = output_file
    if client_params["run"]:
        actual_return_code = None
        process = helpers.run_client(client_params, True)
        expected_return_code = test_case.get("expected_return_code", 0)
        actual_return_code = process.wait()
        if generate:
            test_case["expected_return_code"] = actual_return_code
        else:
            assert actual_return_code == expected_return_code

    utils.validate_output_against_schema(output_file)
    valid_event_names = get_event_names(client_params)
    event_count, total_count = count_events(output_file, client_params["expected_event_type"], valid_event_names)
    print("event_count = {}, total_count = {}".format(event_count, total_count))
    if generate:
        test_case["expected_event_count"] = event_count
        test_case["expected_total_count"] = total_count
        with open(test_filename+'.generated', "w") as test_output:
            # Intentionally leave output_location blank so these will be generated by test case handler.
            client_params["output_location"] = ""
            json.dump(test_case, test_output, indent=4)
    else:
        expected_event_count = _test_case.get("expected_event_count", 0)
        expected_total_count = _test_case.get("expected_total_count", 0)

        if expected_event_count == 0:
            assert event_count == expected_event_count, "Incorrect number of events detected"
        else:
            assert (abs(event_count - expected_event_count) / expected_event_count <= numerical_tolerance), "Incorrect number of events detected"
        if expected_total_count == 0:
            assert total_count == expected_total_count, "Incorrect total count detected"
        else:
            assert (abs(total_count - expected_total_count) / expected_total_count <= numerical_tolerance), "Incorrect total count detected"
