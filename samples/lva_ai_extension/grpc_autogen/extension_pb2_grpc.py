'''
* MIT License
*
* Copyright (c) Microsoft Corporation.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in all
* copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE
'''

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import extension_pb2 as extension__pb2


class MediaGraphExtensionStub(object):
    """
    Media Graph Extension Service

    Media graph extension service definition allows graphs to be extended through a 
    gRPC server implementation of a graph processor node.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessMediaStream = channel.stream_stream(
                '/microsoft.azure.media.live_video_analytics.extensibility.grpc.v1.MediaGraphExtension/ProcessMediaStream',
                request_serializer=extension__pb2.MediaStreamMessage.SerializeToString,
                response_deserializer=extension__pb2.MediaStreamMessage.FromString,
                )


class MediaGraphExtensionServicer(object):
    """
    Media Graph Extension Service

    Media graph extension service definition allows graphs to be extended through a 
    gRPC server implementation of a graph processor node.

    """

    def ProcessMediaStream(self, request_iterator, context):
        """
        Continuously process a single media stream (audio/video)

        Note to Implementers:
        Client authentication can be achieved through an authentication token set on the "x-ms-authentication"
        request metadata key. The token format follows standard HTTP Basic auth scheme. Implementers of this
        service are responsible for validating this token. This token may be set through the REST API. 

        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MediaGraphExtensionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessMediaStream': grpc.stream_stream_rpc_method_handler(
                    servicer.ProcessMediaStream,
                    request_deserializer=extension__pb2.MediaStreamMessage.FromString,
                    response_serializer=extension__pb2.MediaStreamMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'microsoft.azure.media.live_video_analytics.extensibility.grpc.v1.MediaGraphExtension', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MediaGraphExtension(object):
    """
    Media Graph Extension Service

    Media graph extension service definition allows graphs to be extended through a 
    gRPC server implementation of a graph processor node.

    """

    @staticmethod
    def ProcessMediaStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/microsoft.azure.media.live_video_analytics.extensibility.grpc.v1.MediaGraphExtension/ProcessMediaStream',
            extension__pb2.MediaStreamMessage.SerializeToString,
            extension__pb2.MediaStreamMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
